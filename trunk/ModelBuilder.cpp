#include "ModelBuilder.h"


ModelBuilder::ModelBuilder(KinectSensor* sensor)
{
	// to prevent silly errors
	assert (sensor != NULL);

	this->sensor = sensor;
}


ModelBuilder::~ModelBuilder(void)
{
}


void ModelBuilder::GeneratePoints()
{
	// erase previously
	points.clear();

	// retrieve depth buffer from kinect device
	int *depthBuffer = sensor->GetDepthBuffer();

	int max = 0,min = 0,bufferSize;
	bufferSize = sensor->GetHeightDepth() * sensor->GetWidthDepth();

	// find max distance and min distance
	for (int p = 0; p < bufferSize; p++)
	{
		if (depthBuffer[p] > max)
		{
			// new max
			max = depthBuffer[p];
		}
		if (depthBuffer[p] < min)
		{
			// new min
			min = depthBuffer[p];
		}
	}

	// points coordenates will be built using those values as reference
	// ...in the future

	// reserve space
	points.resize(bufferSize);
	for (int b = 0; b < bufferSize; b++)
	{
		// put points in vector
		glm::vec3 tVertex;
		tVertex.x = b % sensor->GetWidthDepth();
		tVertex.y = b / sensor->GetWidthDepth();
		// make the max value being the X size of the buffer
		tVertex.z = (sensor->GetWidthDepth() * depthBuffer[b]) / max;
		// put on vector
		points[b] = tVertex;
	}

	// delete memory
	delete depthBuffer;
}

void ModelBuilder::WriteModelOnFile(char * filename)
{
	std::fstream modelFile;
	modelFile.open(filename);

	// see if there's a file with that name
	if (modelFile == NULL)
	{
		MessageBoxA(0,"No file selected, the model will be build on Model.obj","Warning",(MB_OK | MB_ICONEXCLAMATION));
	}

	modelFile << "#Obj generated by OGL_Kinect" << std::endl;

	// put vertices information
	for (int p = 0; p < points.size(); p++)
	{
		modelFile << "v " << points[p].x << " " << points[p].y << " " << points[p].z << std::endl;
	}

	// close file
	modelFile.close();
}
