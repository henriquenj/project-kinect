#include "ModelBuilder.h"


ModelBuilder::ModelBuilder()
{
}


ModelBuilder::~ModelBuilder(void)
{
}


void ModelBuilder::GeneratePoints(int *depthBuffer,glm::uvec2 size)
{
	// erase previously
	points.clear();

	int max = 0,min = 0,bufferSize;
	bufferSize = size.x * size.y;

	// find max distance and min distance
	for (int p = 0; p < bufferSize; p++)
	{
		if (depthBuffer[p] > max)
		{
			// new max
			max = depthBuffer[p];
		}
		if (depthBuffer[p] < min)
		{
			// new min
			min = depthBuffer[p];
		}
	}

	// points coordenates will be built using those values as reference
	// ...in the future

	// reserve space
	points.resize(bufferSize);
	for (int b = 0; b < bufferSize; b++)
	{
		// put points in vector
		glm::vec3 tVertex;
		tVertex.x = b % size.x;
		tVertex.y = b / size.y;
		// make the max value being the X size of the buffer
		tVertex.z = (size.x * depthBuffer[b]) / max;
		// put on vector
		points[b] = tVertex;
	}

	// delete memory
	delete depthBuffer;
}

void ModelBuilder::WriteModelOnFile(std::string &filename)
{
	// first check if the model has been built
	if (points.empty())
	{
		MessageBoxA(0,"Cannot write a file because the model hasn't been build yet.","Error",(MB_OK | MB_ICONEXCLAMATION));
	}

	std::ofstream modelFile;
	std::string m_fileName = filename; // copy information
	// check for null name
	if (m_fileName.empty())
	{
		MessageBoxA(0,"No file selected, the model will be build on Model.obj","Warning",(MB_OK | MB_ICONEXCLAMATION));
		// fill file name
		m_fileName = "Model.obj";
		modelFile.open(m_fileName.c_str(),std::ios_base::out);
	}
	else
	{
		// ok, there's a name on the file, must check if it's a real one
		modelFile.open(filename.c_str());
	}

	modelFile << "#Obj generated by OGL_Kinect" << std::endl;
	modelFile << "#Avaiable at http://code.google.com/p/project-kinect/" << std::endl;
	// put a group
	modelFile << "g defaultGroup" << std::endl;

	// put vertices information
	for (int p = 0; p < points.size(); p++)
	{
		if ((p % 3) == 0 && p > 2) // every 3 verties, a face
		{
			modelFile << "f " << p << " " << p-1 << " " << p-2 << std::endl;
		}
		modelFile << "v " << points[p].x << " " << points[p].y << " " << points[p].z << std::endl;
		//modelFile << "f " << p+1 << " " << p+1 << " " << p+1 << std::endl;
	}

	// close file
	modelFile.close();
}
